{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,qBACnCC,eAAgBF,SAASC,cAAc,oBACvCE,YAAaH,SAASC,cAAc,sBACpCG,OAAQJ,SAASC,cAAc,WAyBjC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGxCH,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,OAKrB,SAASM,GAAOP,SAAEA,EAAQC,MAAEA,IAC1BO,YAAW,KAAQC,EAAAnB,GAASoB,OAAOC,QAAQ,uBAAqBX,QAAiBC,SAAiBA,GAEpG,SAASW,GAAQZ,SAAEA,EAAQC,MAAEA,IAC3BO,YAAW,KAAQC,EAAAnB,GAASoB,OAAOG,QAAQ,sBAAoBb,QAAeC,SAAiBA,GAtCjGT,EAAKM,OAAOgB,iBAAiB,SAE7B,SAAkBC,GAChBA,EAAMC,iBACN,IAAIC,EAAaC,OAAO1B,EAAKC,WAAW0B,OACxC,MAAMC,EAAYF,OAAO1B,EAAKI,eAAeuB,OACvCE,EAAYH,OAAO1B,EAAKK,YAAYsB,QAM5C,UAAyBF,WAACA,EAAUI,UAAEA,EAASD,UAAEA,IAC/C,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EAEjCvB,EAAcuB,EAAGL,GACfM,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MAAcM,EAAO,C,SAAEP,E,MAAUC,OACnDuB,OAAO,EAACxB,SAAEA,EAAQC,MAAEA,MAAcW,EAAQ,C,SAAEZ,E,MAAUC,OAC1DgB,GAAcG,EAVhBK,CAAgB,C,WAAER,E,UAAYI,E,UAAWD","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector(\"input[name=delay]\"),\n  inputDelayStep: document.querySelector(\"input[name=step]\"),\n  inputAmount: document.querySelector(\"input[name=amount]\"),\n  button: document.querySelector(\"button\"),\n};\n\nrefs.button.addEventListener(\"click\", onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  let delayFirst = Number(refs.inputDelay.value);\n  const delayStep = Number(refs.inputDelayStep.value);\n  const amountAll = Number(refs.inputAmount.value);\n\n  creatPromiseFor({ delayFirst, amountAll, delayStep })\n  \n};\n\nfunction creatPromiseFor({delayFirst, amountAll, delayStep}) {\n  for (let i = 1; i <= amountAll; i += 1)\n    {\n      createPromise(i, delayFirst).\n        then(({ position, delay }) => { succes({ position, delay }); }).\n        catch((({ position, delay }) => { failure({ position, delay }); }));\n    delayFirst += delayStep;\n  };\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n  if (shouldResolve) {\n  resolve({ position, delay })\n  } else {\n  reject({ position, delay }) \n    }  \n  })\n};\n  \nfunction succes({ position, delay }) {\n  setTimeout(() => { Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); }, delay);\n};\nfunction failure({ position, delay }) {\n  setTimeout(() => { Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); }, delay);\n}\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","inputDelay","document","querySelector","inputDelayStep","inputAmount","button","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","$47d4ff9957288465$var$succes","setTimeout","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$failure","failure","addEventListener","event","preventDefault","delayFirst","Number","value","delayStep","amountAll","i","then","catch","$47d4ff9957288465$var$creatPromiseFor"],"version":3,"file":"03-promises.9c9a23e6.js.map"}